---
# Locations
walle_malware_database_location: /etc/walle
walle_malware_database_version: main
walle_malware_repo: https://github.com/usegalaxy-eu/intergalactic-most-wanted-list.git
walle_malware_database_force_update: false  # Local changes will be overwritten

walle_pgpass_file: "/home/{{ walle_user_name }}/.pgpass"
walle_bashrc: /opt/galaxy/.bashrc
walle_python: /usr/bin/python
walle_database_file: checksums.yml
walle_log_dir: /var/log/walle
walle_script_location: /usr/local/bin/walle.py
#walle_virtualenv: <optional venv for walle to use>

# Script args
walle_filesize_min: 0
walle_filesize_max: 10
walle_since_hours: 24
walle_envs_database:
  - key: MALWARE_LIB
    value: "{{ walle_malware_database_location }}/{{ walle_database_file }}"
  - key: PGPASSFILE
    value: "{{ walle_pgpass_file }}"
  - key: GALAXY_CONFIG_FILE
    value: "{{ galaxy_config_dir }}/galaxy.yml"
  - key: GALAXY_LOG_DIR
    value: "{{ galaxy_log_dir }}"
  - key: PGHOST
    value: 127.0.0.1
  - key: PGUSER
    value: galaxy
  - key: PGDATABASE
    value: galaxy
  - key: GALAXY_PULSAR_APP_CONF
    value: "{{ galaxy_config_dir }}/pulsar_app.yml"
  - key: GXADMIN_PATH
    value: /usr/local/bin/gxadmin

# These will be added to the default env vars - you can override
# walle_envs_database by defining the same key in walle_extra_env_vars
walle_extra_env_vars: []

walle_env_vars: "{{ walle_envs_database + walle_extra_env_vars }}"

# delete users when malware was found and malware severity reached walle_delete_threshold
walle_delete_users: false
walle_delete_threshold: medium
walle_envs_user_deletion:
  - key: GALAXY_API_KEY
    value: "{{ walle_api_key }}"
  - key: GALAXY_BASE_URL
    value: "{{ walle_galaxy_url }}"
#  - key: GALAXY_USER_DELETION_MESSAGE
#    value: "Your personalized message"
#  - key: GALAXY_USER_DELETION_SUBJECT
#    value: "Your personalized subject line"
# walle_api_key: #admin api key to delete users, goes to VAULT
# walle_galaxy_url: #galaxy_hostname, no leading slash
# walle_tool: <string to filter tool ids in database job table>
walle_verbose: false
walle_kill: false

walle_slack_alerts: false
walle_slack_api_token: null  # Make a "Slack app" to get a token
walle_slack_channel_id: null  # Copy from your Slack channel settings
walle_envs_slack:
  - key: SLACK_API_TOKEN
    value: "{{ walle_slack_api_token }}"
  - key: SLACK_CHANNEL_ID
    value: "{{ walle_slack_channel_id }}"
  - key: WALLE_HOSTNAME
    value: "{{ inventory_hostname }}"

# Cron
walle_cron_day: "*"
walle_cron_hour: "*/1"
walle_cron_minute: "0"
walle_user_name: "{{ galaxy_user_name | default('galaxy') }}"
walle_user_group: "{{ galaxy_group | default('galaxy') }}"
